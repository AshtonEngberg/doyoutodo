type anon_class_32_1 = 
 service {
   testTodoCompletion: () -> ();
   test_creation_pidmetadatatodos_editmetadata: () -> (Result_1);
   test_todos: () -> (Result);
 };
type UsersTodosStableState = 
 vec record {
       UniqueId;
       vec Todo;
     };
type UsersMetadataStableState = 
 vec record {
       UniqueId;
       UserMetadata;
     };
type UserMetadata = 
 record {
   emailAddress: text;
   epochCreationTime: Time;
   epochLastUpdateTime: Time;
   monotonicCreateTodoCount: nat;
   preferredDisplayName: text;
 };
type UniqueId = text;
type Todo = 
 record {
   content: text;
   currentScheduledStatus: ScheduledStatus;
   epochCreationTime: Time;
   epochLastUpdateTime: Time;
   id: UniqueId;
   tags: vec text;
   title: text;
 };
type Time = int;
type StopTime = int;
type StartTime = int;
type ScheduledStatus = 
 variant {
   active: record {
             StartTime;
             opt NominalInterval;
           };
   completed: record {
                Interval;
                opt NominalInterval;
              };
   scheduled: NominalInterval;
   unscheduled;
 };
type Result_1 = 
 variant {
   err: text;
   ok:
    record {
      PIdContextStableState;
      UsersMetadataStableState;
      UsersTodosStableState;
    };
 };
type Result = 
 variant {
   err: text;
   ok: vec Todo;
 };
type PIdContextStableState = 
 vec record {
       principal;
       UniqueId;
     };
type NominalInterval = 
 record {
   StartTime;
   StopTime;
 };
type Interval = 
 record {
   StartTime;
   StopTime;
 };
service : () -> anon_class_32_1
