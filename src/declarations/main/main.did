type anon_class_28_1 = 
 service {
   activateScheduledOrUnscheduledTodo: (record {todoIdIn: UniqueId;}) ->
    (Result);
   addNewActiveTodo:
    (record {
       contentIn: opt text;
       tagsIn: opt vec text;
       titleIn: opt text;
     }) -> (Result);
   addNewScheduledTodo:
    (record {
       contentIn: opt text;
       scheduledStartTime: Time;
       scheduledStopTime: Time;
       tagsIn: opt vec text;
       titleIn: opt text;
     }) -> (Result);
   addNewUnscheduledTodo:
    (record {
       contentIn: opt text;
       tagsIn: opt vec text;
       titleIn: opt text;
     }) -> (Result);
   authenticateWithUserAccountCreationIfNecessary: () -> (Result_4);
   completeActiveTodo: (record {todoIdIn: UniqueId;}) -> (Result);
   helloCanister: () -> (text);
   queryAllTodosOfUser: () -> (Result_3);
   querySpecificTodoOfUser: (record {todoIdIn: UniqueId;}) -> (Result_2);
   queryUserMetadata: () -> (Result_1);
   removeExistingTodo: (record {todoIdIn: UniqueId;}) -> (Result);
   rescheduleScheduledTodo:
    (record {
       newScheduledStartTime: Time;
       newScheduledStopTime: Time;
       todoIdIn: UniqueId;
     }) -> (Result);
   scheduledUnscheduledTodo:
    (record {
       scheduledStartTime: Time;
       scheduledStopTime: Time;
       todoIdIn: UniqueId;
     }) -> (Result);
   unscheduleScheduledTodo: (record {todoInIn: UniqueId;}) -> (Result);
   updateSpecificTodoMetadataOrContent:
    (record {
       contentIn: opt text;
       tagsIn: opt vec text;
       titleIn: opt text;
       todoIdIn: UniqueId;
     }) -> (Result);
   updateUserMetadata:
    (record {
       emailAddressIn: opt text;
       preferredDisplayNameIn: opt text;
     }) -> (Result);
 };
type UserMetadata = 
 record {
   emailAddress: text;
   epochCreationTime: Time;
   epochLastUpdateTime: Time;
   monotonicCreateTodoCount: nat;
   preferredDisplayName: text;
 };
type UniqueId = text;
type Todo = 
 record {
   content: text;
   currentScheduledStatus: ScheduledStatus;
   epochCreationTime: Time;
   epochLastUpdateTime: Time;
   id: UniqueId;
   tags: vec text;
   title: text;
 };
type Time = int;
type StopTime = int;
type StartTime = int;
type ScheduledStatus = 
 variant {
   active: record {
             StartTime;
             opt NominalInterval;
           };
   completed: record {
                Interval;
                opt NominalInterval;
              };
   scheduled: NominalInterval;
   unscheduled;
 };
type Result_4 = 
 variant {
   err: text;
   ok: UniqueId;
 };
type Result_3 = 
 variant {
   err: text;
   ok: vec Todo;
 };
type Result_2 = 
 variant {
   err: text;
   ok: Todo;
 };
type Result_1 = 
 variant {
   err: text;
   ok: UserMetadata;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type NominalInterval = 
 record {
   StartTime;
   StopTime;
 };
type Interval = 
 record {
   StartTime;
   StopTime;
 };
service : () -> anon_class_28_1
